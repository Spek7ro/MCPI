for (i in carros_mpg) {
suma <- suma + i
}
suma
suma = 0
contador = 0
for (i in carros_mpg) {
suma <- suma + i
contador <- contador + 1
}
promedio = suma / contador
promedio
mean(datos$mpg)
class(carros_mpg)
carros_mpg <- c(datos$mpg)
class(carros_mpg)
contador <- 0
for (mpg in carros_mpg) {
if (mpg > 20) {
contador <- contador + 1
}
}
contador
suma = 0
contador = 0
for (i in carros_mpg) {
suma <- suma + i
contador <- contador + 1
}
promedio = suma / contador
promedio
mean(datos$mpg)
contador <- 0
for (mpg in datos$mpg) {
if (mpg > 20) {
contador <- contador + 1
}
}
contador
carros_mpg <- c(datos$mpg)
class(carros_mpg)
contador <- 0
for (mpg in carros_mpg) {
if (mpg > 20) {
contador <- contador + 1
}
}
contador
contador <- 0
for (mpg in carros_mpg) {
if (mpg > 20) {
contador ++
}
contador <- 0
for (mpg in carros_mpg) {
if (mpg > 20) {
contador <- contador + 1
}
}
contador
print(datos$mpg > 20)
carros_mpg <- c(datos$mpg)
class(carros_mpg)
contador <- 0
for (mpg in carros_mpg) {
if (mpg > 20) {
contador <- contador + 1
}
}
contador
suma
sum(datos$mpg)
nrow(datos$mpg)
nrow(datos)
contador
# Ejercicio 3:
suma = 0
contador = 0
for (i in carros_mpg) {
suma <- suma + i
contador <- contador + 1
}
contador
promedio = suma / contador
promedio
nrow(datos)
mean(datos$mpg)
nrow(datos$mpg)
NCOL(datos)
NROW(datos)
promedio
mean(datos$mpg)
contador
promedio = suma / NROW(datos$mpg)
promedio
mean(datos$mpg)
x <- 1,2,3,4,5,6,7,9
x <- c(1,2,3,4,5,6,7,9)
suma = 0
for (num in x) {
if (num > 3 && num < 7) {
print(num)
suma <- suma + num
}
}
suma
print(x > 3)
print(x > 3 && x < 7)
x <- c(1,2,3,4,5,6,7,9)
suma = 0
for (num in x) {
if (num > 3 && num < 7) {
print(num)
suma <- suma + num
}
}
suma
# Valor mas grande del vector x
max(x)
# Valor mas pequeño del vector x
min(x)
# Valor mas grande del vector x
max(x)
# Valor mas pequeño del vector x
min(x)
for (num in x) {
if (num < 5) {
print(num)
}
}
acumulador = 0
for (num in x) {
print(acumulador)
acumulador <- acumulador + num
}
for (i in length(x):1) {
print(x[i])
}
#Dado el vector x<-c(1,2,3,4,5,6,7,8,9)
x<-c(1,2,3,4,5,6,7,8,9)
#Dado el vector x<-c(1,2,3,4,5,6,7,8,9)
x <- c(1,2,3,4,5,6,7,8,9)
x
suma <- 0
for (num in x) {
if (num > 3 && num < 7) {
print(num)
suma <- suma + num
}
}
suma
for (i in length(x):1) {
print(x[i])
}
for (num in x) {
if (num < 5) {
print(num)
}
}
acumulado <- 0
for (num in x) {
acumulado <- acumulado + num
print(acumulado)
}
#5, imprimir el valor más grande
max(x)
#6, imprimir el valor más pequeño
min(x)
#5, imprimir el valor más grande
aux <- x[1]
aux <- x[1]
for (num in x) {
if (num > aux) {
aux <- num
}
}
aux
#6, imprimir el valor más pequeño
min(x)
#6, imprimir el valor más pequeño
#min(x)
aux <- x[1]
for (num in x) {
if (num < aux) {
aux <- num
}
}
aux
#7, obtener la suma total de los elementos en el arreglo pero
#8, a cada elemento del arreglo se le restará el "promedio"
# y se sumara el total   === Sum(xi - mean)
promedio <- mean(x)
promedio
suma_total <- 0
suma_total
for (num in x) {
suma_total <- suma_total + num
}
print(suma_total)
promedio <- suma_total / length(x)
promedio
for (num in x) {
suma_dif <- suma_dif + (num - promedio)
}
suma_dif <- 0
for (num in x) {
suma_dif <- suma_dif + (num - promedio)
}
print(suma_dif)
suma_cuadrados <- 0
for (num in x) {
suma_cuadrados <- suma_cuadrados + (num - promedio)^2
}
suma_cuadrados
aux_max <- x[1]
aux_min <- x[1]
for (num in x) {
if (num > aux_max) {
aux_max <- num
}
if (num < aux_min) {
aux_min <- num
}
}
rango_dinamico <- aux_max - aux_min
print(rango_dinamico)
max(x) - min(x)
# Funciones
args(lm)
calcularMinfimo <- function(vector) {
aux_min <- x[1]
for (num in x) {
if (num < aux_min) {
aux_min <- num
}
}
return(aux_min)
}
calcularMinfimo <- function(vector) {
aux_min <- vector[1]
for (num in vector) {
if (num < aux_min) {
aux_min <- num
}
}
return(aux_min)
}
aux_min <- vector[1]
for (num in vector) {
if (num < aux_min) {
aux_min <- num
}
}
return(aux_min)
vector <- c(20,78,5,3,90)
calcularMin <- function(vector) {
aux_min <- vector[1]
for (num in vector) {
if (num < aux_min) {
aux_min <- num
}
}
return(aux_min)
}
vector <- c(20,78,5,3,90)
calcularMin(vector)
# Funcion suma de un vector
sumaVector <- function(vector) {
suma <- 0
for (num in vector) {
suma <- suma + num
}
return(suma)
}
vector <- c(20,78,5,3,90)
sumaVector(vector)
promedio <- function(vector) {
return(sumaVector(vector) / length(vector))
}
promedio(vector)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
desviacionEstandar(vector)
desviacionEstandar(vector)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
desviacionEstandar(vector)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
desviacionEstandar(vector)
vector <- c(1,2,4,5,6,7)
desviacionEstandar(vector)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
suma <- 0
for (num in vector) {
suma <- suma + ((num - promedio(vector))^2
}
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
suma <- 0
for (num in vector) {
suma <- suma + ((num - promedio(vector))^2
}
suma <- 0
for (num in vector) {
suma <- suma + ((num - promedio(vector))^2
}
desviacion <- (1 / length(vector) - 1)) * suma
return(desviacion)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
desviacionEstandar(vector)
desviacionEstandar(vector)
print(desviacionEstandar(vector))
sumaVector(vector)
# Funcion de promedio de un vector
promedio <- function(vector) {
return(sumaVector(vector) / length(vector))
}
promedio(vector)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
print(desviacionEstandar(vector))
vector <- c(20,78,5,3,90)
# Funciones (las funciones tienen sobrecaraga de argumntos)
args(lm)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
suma <- 0
for (num in vector) {
suma <- suma + ((num - promedio(vector))^2
}
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
print(desviacionEstandar(vector))
print(4)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
print(desviacionEstandar(vector))
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
print(desviacionEstandar(vector))
#Dado el vector x<-c(1,2,3,4,5,6,7,8,9)
x <- c(1,2,3,4,5,6,7,8,9)
x
# Funcion que calcule si es impar o para
es_par_impar <- function(n) {
if (n % 2) {
# Funcion que calcule si es impar o para
es_par_impar <- function(n) {
if (n % 2) {
# Funcion que calcule si es impar o para
parOImpar <- function(n) {
if (n % 2) {
# Funcion que calcule si es impar o para
parOImpar <- function(n) {
if (n % 2 = 0) {
# Funcion que convierta de grados centigrados a Farenheit
centigrados_a_Farenheit <- function(grados) {
return(1)
}
centigrados_a_Farenheit(23)
# funncion para calcular la desviacion estandar
desviacionEstandar <- function(vector) {
vector <- c(1,2,4,5,6,7)
print(desviacionEstandar(vector))
desviacionEstandar(vector)
# Funcion que convierta de grados centigrados a Farenheit
centigrados_a_Farenheit <- function(grados) {
return(1)
}
centigrados_a_Farenheit(23)
centigrados_a_Farenheit(23)
# Funcion que calcule si es impar o para
parOImpar <- function(n) {
if (n %% 2 = 0) {
if (n %% 2 == 0) {
print("Es par")
} else {
print("Es impar")
}
# Funcion que calcule si es impar o para
parOImpar <- function(n) {
if (n %% 2 == 0) {
print("Es par")
} else {
print("Es impar")
}
}
parOImpar(5)
parOImpar(10)
parOImpar(3)
# Funcion que convierta de grados centigrados a Farenheit
centigrados_a_Farenheit <- function(grados_centigrados) {
grados_F <- (grados_centigrados * 1.8) + 32
return(grados_F)
}
centigrados_a_Farenheit(23)
# Funcion que convierta de grados Farenheit a centigrados
Farenheit_a_centigrados <- function(garados_Farenheit) {
grados_c <- (garados_Farenheit - 32) / 1.8
return(grados_c)
}
Farenheit_a_centigrados(30)
Farenheit_a_centigrados(300)
centigrados_a_Farenheit(23)
Farenheit_a_centigrados(200)
datos <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosTitanic_SinLimpiar.csv")
View(datos)
# 1. Cargar el dataset
datos <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosTitanic_SinLimpiar.csv")
# 2. Limpiar el dataset
datos$Id
# 2. Limpiar el dataset
is.na(datos$Id)
# 2. Limpiar el dataset
sum(is.na(datos$Id))
sum(is.na(datos$Vivio))
sum(is.na(datos$Pclase))
sum(is.na(datos$Nombre))
sum(is.na(datos$Sexo))
sum(is.na(datos$Edad))
sum(is.na(datos$HermaConyu))
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- datos[!is.na(datos$Edad), ]
datos_limpios
sum(is.na(datos$PadresHijos))
sum(is.na(datos$Ticket))
sum(is.na(datos$Tarifa))
# Continumaos analizando
sum(is.na(datos_limpios$HermaConyu))
sum(is.na(datos_limpios$PadresHijos))
sum(is.na(datos_limpios$Ticket))
sum(is.na(datos_limpios$Tarifa))
suma(is.na(datos_limpios$Cabina))
sum(is.na(datos_limpios$Cabina))
sum(is.na(datos_limpios$PuertoEmb))
# 3. Crear un modelo de Regresion logistica
# Formula: en la cual le vamos a indicar que queremos predecir
# Predecir si una persona hubiera sobrevivido o no usando la hipoteis
# Mujeres y niños primero
# formula = "vivio ~ sexo + edad"
modelo <- glm(vivio ~ sexo + edad, family = "binomial", data = datos_limpios)
# 3. Crear un modelo de Regresion logistica
# Formula: en la cual le vamos a indicar que queremos predecir
# Predecir si una persona hubiera sobrevivido o no usando la hipoteis
# Mujeres y niños primero
# formula = "vivio ~ sexo + edad"
modelo <- glm(Vivio ~ sexo + edad, family = "binomial", data = datos_limpios)
# 3. Crear un modelo de Regresion logistica
# Formula: en la cual le vamos a indicar que queremos predecir
# Predecir si una persona hubiera sobrevivido o no usando la hipoteis
# Mujeres y niños primero
# formula = "vivio ~ sexo + edad"
modelo <- glm(Vivio ~ Sexo + Edad, family = "binomial", data = datos_limpios)
# Obtener el desempeño usando metricas:
# 1.  Accuracy: Exactitud = % de instancias
# Paso 1: Calcular la salida del algoritmo
# Predicciones
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones
predicciones[1:10]
# Vamos a crear la tabla con las salidas del modelo
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
View(tablita)
# Binarizacion manual:
for (i in seq_along(tablita$prediccionesIA)) {
if (tablita$prediccionesIA[i] < 0.5) {
tablita$prediccionesIA[i] <- 0
} else {
tablita$prediccionesIA[i] <- 1
}
}
# Vamos a crear la tabla con las salidas del modelo
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Una vez que tenemos la tabla con las dos columnas ya binarizadas
# Calculamos su accuracy
# forma tradicional:
suma <- 0
for (i in seq_along(tablita$Original)) {
if (tablita$Original[i] = tablita$prediccionesIA[i]) {
for (i in seq_along(tablita$Original)) {
if (tablita$Original[i] == tablita$prediccionesIA[i]) {
suma <- suma + 1
}
}
accuracy <- suma/nrow(tablita)
accuracy
# Accuracy de forma vectorial:
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosCalamarMCPI.csv")
View(DatosCalamarMCPI)
# Vamos a probarlo
# Cargar datos:
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosCalamarMCPI.csv")
# Obtener predicciones:
prediccionesMCPI <- predict(modelo, newdata = DatosCalamarMCPI, type = "response")
prediccionesMCPI
