# Obtener predicciones:
prediccionesMCPI <- predict(modelo, newdata = DatosCalamarMCPI, type = "response")
prediccionesMCPI
zactaecas <- c(8.5, 7.8, 8.2, 9.0, 7.6, 8.9, 7.9, 8.1, 8.3, 7.4, 8.7, 8.0, 8.6)
Zac <- c(8.5, 7.8, 8.2, 9.0, 7.6, 8.9, 7.9, 8.1, 8.3, 7.4, 8.7, 8.0, 8.6)
Zac <- c(8.5, 7.8, 8.2, 9.0, 7.6, 8.9, 7.9, 8.1, 8.3, 7.4, 8.7, 8.0, 8.6)
Dgo <- c()
# Vamos a cargar y limpiar un dataset
# 1. Cargar el dataset
datos <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosTitanic_SinLimpiar.csv")
Dgo <- c(6.5, 7.2, 7.0, 6.8, 6.3, 7.1, 6.9, 6.4, 7.3, 6.7, 6.8, 6.6)
t.test(z = Zac, y = Dgo, alternative = "greater", paired = FALSE, var.equal = TRUE)
t.test(z = Zac, y = Dgo, alternative = "greater", paired = FALSE, var.equal = TRUE)
t.test(x = Zac, y = Dgo, alternative = "greater", paired = FALSE, var.equal = TRUE)
mean(Zac)
mean(Dgo)
# Desviaciones estandra
sd(Zac)
sd(Dgo)
DatosTitanic_SinLimpiar <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/DatosTitanic_SinLimpiar.csv")
View(DatosTitanic_SinLimpiar)
# Vamos a cargar y limpiar un dataset
# 1. Cargar el dataset
datos <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/DatosTitanic_SinLimpiar.csv")
# 2. Limpiar el dataset
sum(is.na(datos$Id))
sum(is.na(datos$Vivio))
sum(is.na(datos$Pclase))
sum(is.na(datos$Nombre))
sum(is.na(datos$Sexo))
sum(is.na(datos$Edad))
# Cuando tenemos datos faltantes hay dos opciones:
# 1. Quitarlos (renglones)
# 2. Imputarlos (Invetarlos)
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- datos[!is.na(datos$Edad), ]
# Continumaos analizando
sum(is.na(datos_limpios$HermaConyu))
sum(is.na(datos_limpios$PadresHijos))
sum(is.na(datos_limpios$Ticket))
sum(is.na(datos_limpios$Tarifa))
sum(is.na(datos_limpios$Cabina))
sum(is.na(datos_limpios$PuertoEmb))
# False = 0, True = 1
# 3. Crear un modelo de Regresion logistica
# Formula: en la cual le vamos a indicar que queremos predecir
# Predecir si una persona hubiera sobrevivido o no usando la hipoteis
# Mujeres y niños primero
# formula = "vivio ~ sexo + edad"
modelo <- glm(Vivio ~ Sexo + Edad, family = "binomial", data = datos_limpios)
# Obtener el desempeño usando metricas:
# 1.  Accuracy: Exactitud = % de instancias
# Paso 1: Calcular la salida del algoritmo
# Predicciones
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# la salida de la regresion logistica son valores entre 0 y 1
# Vamos a crear la tabla con las salidas del modelo
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# para poder comprar lo que deberia de ser con la salida de IA
# Vamos a Binarizar: Valores menores a 0.5 sera cero y cualquier valor
# Mayor o igual a 0.5 sera uno
# Binarizacion manual con un ciclo for:
for (i in seq_along(tablita$prediccionesIA)) {
if (tablita$prediccionesIA[i] < 0.5) {
tablita$prediccionesIA[i] <- 0
} else {
tablita$prediccionesIA[i] <- 1
}
}
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Una vez que tenemos la tabla con las dos columnas ya binarizadas
# Calculamos su accuracy
# forma tradicional:
suma <- 0
for (i in seq_along(tablita$Original)) {
if (tablita$Original[i] == tablita$prediccionesIA[i]) {
suma <- suma + 1
}
}
accuracy <- suma/nrow(tablita)
accuracy
# Accuracy de forma vectorial:
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
# Vamos a probarlo
# Cargar datos:
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/DatosCalamarMCPI.csv")
# Vamos a probarlo
# Cargar datos:
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/Datasets/AnalisisDeDatos_Project/DatosCalamarMCPI.csv")
# Vamos a probarlo
# Cargar datos:
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/Datasets/AnalisisDeDatos_Project/DatosCalamarMCPI.csv")
# Vamos a probarlo
# Cargar datos:
DatosCalamarMCPI <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/DatosCalamarMCPI.csv")
# Obtener predicciones:
prediccionesMCPI <- predict(modelo, newdata = DatosCalamarMCPI, type = "response")
# Obtener predicciones:
prediccionesMCPI <- predict(modelo, newdata = DatosCalamarMCPI, type = "response")
prediccionesMCPI
##### Etapa de Analis Univariado
# 1. Generar Estadisticos
mean(datos_limpios$Edad)
# Ojo, solo se hace en las caracteristicas de entrada no en las de salida
datos_limpios$Pclase
# Ojo, solo se hace en las caracteristicas de entrada no en las de salida
sum(datos_limpios$Pclase)
# Ojo, solo se hace en las caracteristicas de entrada no en las de salida
sd(datos_limpios$Pclase)
var(datos_limpios$Pclase)
range(datos_limpios$Pclase)
max(datos_limpios$Pclase) - min(datos_limpios$Pclase)
# Edad:
sd(datos_limpios$Edad) #
var(datos_limpios$Edad)
max(datos_limpios$Edad) - min(datos_limpios$Edad) # 2
View(datos_limpios)
max(datos_limpios$HermaConyu) - min(datos_limpios$HermaConyu) # 79.58
var(datos_limpios$HermaConyu) # 211.0191
# HermaConyu
sd(datos_limpios$HermaConyu) # 14.5265
max(datos_limpios$PadresHijos) - min(datos_limpios$PadresHijos) # 79.58
var(datos_limpios$PadresHijos) # 211.0191
# PadresHijos
sd(datos_limpios$PadresHijos) # 14.5265
max(datos_limpios$Tarifa) - min(datos_limpios$Tarifa) # 6
# Tarifa
sd(datos_limpios$Tarifa) #
var(datos_limpios$Tarifa) #
#### Ahora ML:
modelo <- glm(Vivio ~ Sexo + Edad, family = "binomial", data = datos_limpios)
summary(modelo)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ Pclase, family = "binomial", data = datos_limpios)
#### Ahora ML:
modelo <- glm(Vivio ~ Sexo, family = "binomial", data = datos_limpios)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ Edad, family = "binomial", data = datos_limpios)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ HermaConyu, family = "binomial", data = datos_limpios)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ PadresHijos, family = "binomial", data = datos_limpios)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ Tarifa, family = "binomial", data = datos_limpios)
summary(modelo)
# 3. Crear un modelo de Regresion logistica
# Formula: en la cual le vamos a indicar que queremos predecir
# Predecir si una persona hubiera sobrevivido o no usando la hipoteis
# Mujeres y niños primero
# formula = "vivio ~ sexo + edad"
modelo <- glm(Vivio ~ Sexo + Edad, family = "binomial", data = datos_limpios)
# Obtener el desempeño usando metricas:
# 1.  Accuracy: Exactitud = % de instancias
# Paso 1: Calcular la salida del algoritmo
# Predicciones
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Vamos a crear la tabla con las salidas del modelo
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizacion manual con un ciclo for:
for (i in seq_along(tablita$prediccionesIA)) {
if (tablita$prediccionesIA[i] < 0.5) {
tablita$prediccionesIA[i] <- 0
} else {
tablita$prediccionesIA[i] <- 1
}
}
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Una vez que tenemos la tabla con las dos columnas ya binarizadas
# Calculamos su accuracy
# forma tradicional:
suma <- 0
for (i in seq_along(tablita$Original)) {
if (tablita$Original[i] == tablita$prediccionesIA[i]) {
suma <- suma + 1
}
}
accuracy <- suma/nrow(tablita)
accuracy
# Accuracy de forma vectorial:
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
#### Ahora ML:
modelo <- glm(Vivio ~ Pclase, family = "binomial", data = datos_limpios)
summary(modelo)
#### Ahora ML:
modelo <- glm(Vivio ~ Pclase, family = "binomial", data = datos_limpios)
summary(modelo)
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
modelo <- glm(Vivio ~ Sexo, family = "binomial", data = datos_limpios)
summary(modelo)
# p-valor:
# Pclase -> 2e-16 ***
# Sexo -> 2e-16 ***
# Edad -> 0.03 97 *
# HermaConyu -> 0.643
# PadresHijos -> 0.0142 *
# Tarifa -> 1.61e-10 ***ç
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
modelo <- glm(Vivio ~ Edad, family = "binomial", data = datos_limpios)
summary(modelo)
# p-valor:
# Pclase -> 2e-16 ***
# Sexo -> 2e-16 ***
# Edad -> 0.03 97 *
# HermaConyu -> 0.643
# PadresHijos -> 0.0142 *
# Tarifa -> 1.61e-10 ***ç
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
modelo <- glm(Vivio ~ HermaConyu, family = "binomial", data = datos_limpios)
summary(modelo)
# p-valor:
# Pclase -> 2e-16 ***
# Sexo -> 2e-16 ***
# Edad -> 0.03 97 *
# HermaConyu -> 0.643
# PadresHijos -> 0.0142 *
# Tarifa -> 1.61e-10 ***ç
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
# Variables:
# Pcalse -> 0.67507
# Sexo -> 0.780112
# Edad -> 0.5938375
# HermaConyu ->
# PadresHijos ->
# Tarifa ->
modelo <- glm(Vivio ~ PadresHijos, family = "binomial", data = datos_limpios)
summary(modelo)
# p-valor:
# Pclase -> 2e-16 ***
# Sexo -> 2e-16 ***
# Edad -> 0.03 97 *
# HermaConyu -> 0.643
# PadresHijos -> 0.0142 *
# Tarifa -> 1.61e-10 ***ç
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
modelo <- glm(Vivio ~ Tarifa, family = "binomial", data = datos_limpios)
summary(modelo)
# p-valor:
# Pclase -> 2e-16 ***
# Sexo -> 2e-16 ***
# Edad -> 0.03 97 *
# HermaConyu -> 0.643
# PadresHijos -> 0.0142 *
# Tarifa -> 1.61e-10 ***ç
# Prediciones:
predicciones <- predict(modelo, newdata = datos_limpios, type = "response")
predicciones[1:10]
# Construir la tabla
tablita <- data.frame(Original = datos_limpios$Vivio,
prediccionesIA = predicciones)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablita$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Calcular el accuracy
accuracy <- sum(tablita$Original == tablita$prediccionesIA)/nrow(tablita)
accuracy
# 1. cargar los datos
datos_cancer <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/bcdr_d01_features.csv")
View(datos_cancer)
# 2. limpiar los datos
# por cada columna checar si hay NaN´S
# vamos a quitar la columna density por
sum(is.na(datos_cancer$density))
# como quitar una columna?
# paso 1: obtener el nombre y número (posicion) de columnas
colnames(datos_cancer) # me regresa el nombre y la posicion de las columnas
# paso 2: quitar la columna 15 density (operacion vectorial)
# datos_cancer <- datos_cancer[reglones(s), columnas(s)]
datos_cancer <- datos_cancer[ , -15] # todas menos la 15
# la columna classification tienen espacios
datos_cancer$classification
# vamos a convertir Malign -> 1 y Benign -> 0
# datos_cancer$classification[cuales reglones]
datos_cancer$classification[datos_cancer$classification == " Malign "] <- 1
datos_cancer$classification[datos_cancer$classification == " Benign "] <- 0
class(datos_cancer$classification)
# cambiar la columna classification de caracter a numero
datos_cancer$classification <- as.numeric(datos_cancer$classification)
class(datos_cancer$classification)
# 3. Crear un modelo: Regresion logistica
# Seleccionar que queremos predecir en funcion de que (seleccion de caracteristicas)
# usaremos age, i_mean y i_std_dev
datos_cancer$s_y_center_mass
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
sd(datos_cancer$age) # Desviacion estandar
var(datos_cancer$age) # Varianza
range(datos_cancer) # Rango Dinamico -> 1-3 = 2
max(datos_limpios$Pclase) - min(datos_limpios$Pclase) # 2
range(datos_cancer) # Rango Dinamico -> 1-3 = 2
max(datos_cancer$age) - min(datos_cancer$age) # 2
class(datos_cancer$classification)
class(datos_cancer)
colnames(datos_cancer)
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango_Dinamico = numeric(),
stringsAsFactors = FALSE
)
View(resultados)
# Obtener los nombres de las variables excepto la última ('classification')
variables <- colnames(datos_cancer)[colnames(datos_cancer) != "classification"]
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]], na.rm = TRUE)
var_val <- var(datos_cancer[[var]], na.rm = TRUE)
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango_Dinamico = rango_val,
stringsAsFactors = FALSE
))
}
}
View(resultados)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
sd(datos_cancer$age)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
var(datos_cancer$age)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
var(datos_cancer$t_homo)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
sd(datos_cancer$t_homo)
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango_Dinamico = rango_val,
stringsAsFactors = FALSE
))
}
}
options(scipen = 999)  # evita notación científica
print(resultados)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
sd(datos_cancer$age)
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango_Dinamico = rango_val,
stringsAsFactors = FALSE
))
}
}
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
sd(datos_cancer$s_area)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
sd(datos_cancer$age)
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango_Dinamico = numeric(),
P-Valor = numeric()
gc()
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango_Dinamico = numeric(),
P_Valor = numeric()
stringsAsFactors = FALSE
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango_Dinamico = numeric(),
P_Valor = numeric(),
stringsAsFactors = FALSE
)
t_test <- t.test(datos_cancer$age, mu = 0)
t_test <- t.test(datos_cancer$age, mu = 0)
datos_cancer <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/bcdr_d01_features.csv")
# 2. limpiar los datos
# por cada columna checar si hay NaN´S
# vamos a quitar la columna density por
sum(is.na(datos_cancer$density))
# como quitar una columna?
# paso 1: obtener el nombre y número (posicion) de columnas
colnames(datos_cancer) # me regresa el nombre y la posicion de las columnas
# paso 2: quitar la columna 15 density (operacion vectorial)
# datos_cancer <- datos_cancer[reglones(s), columnas(s)]
datos_cancer <- datos_cancer[ , -15] # todas menos la 15
# la columna classification tienen espacios
datos_cancer$classification
# vamos a convertir Malign -> 1 y Benign -> 0
# datos_cancer$classification[cuales reglones]
datos_cancer$classification[datos_cancer$classification == " Malign "] <- 1
datos_cancer$classification[datos_cancer$classification == " Benign "] <- 0
class(datos_cancer$classification)
# cambiar la columna classification de caracter a numero
datos_cancer$classification <- as.numeric(datos_cancer$classification)
class(datos_cancer$classification)
t_test <- t.test(datos_cancer$age, mu = 0)
t_test
formulita <- as.formula("classification ~ age")
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
summary(modelo)
