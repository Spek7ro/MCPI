# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
stringsAsFactors = FALSE
))
}
}
print(resultados, digits = 5)
# Obtener los nombres de las variables excepto la última ('classification')
variables <- colnames(datos_cancer)[colnames(datos_cancer) != "classification"]
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# -------- Modelo logístico univariado -------- ML
formulita <- as.formula(paste("classification ~", var))
# Crear el modelo
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
# Obtener p-valor de la variable
resumen <- summary(modelo)
p_val <- coef(resumen)[2, 4]  # p-valor del coeficiente de la variable
# --- Calcular Accuracy ---
predicciones <- ifelse(predict(modelo, type = "response") > 0.5, 1, 0)
# Verificar que la variable dependiente sea numérica binaria (0/1)
# Si es factor, la convertimos
if (is.factor(datos_cancer$classification)) {
real <- as.numeric(datos_cancer$classification) - 1
} else {
real <- datos_cancer$classification
}
accuracy_val <- mean(predicciones == real, na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
P_Valor = p_val,
Accuracy = accuracy_val,
stringsAsFactors = FALSE
))
}
}
formulita <- as.formula("classification ~ age")
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
summary(modelo)
p_val <- coef(resumen)[2, 4]
p_val
p_val <- coef(resumen)[2, 5]
p_val
p_val <- coef(resumen)[2, -1]
p_val
p_val <- coef(resumen)[2, -2]
p_val
p_val <- coef(resumen)[2, 4]
p_val
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango = numeric(),
P_Valor = numeric(),
Accuracy = numeric(),
stringsAsFactors = FALSE
)
# Obtener los nombres de las variables excepto la última ('classification')
variables <- colnames(datos_cancer)[colnames(datos_cancer) != "classification"]
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# -------- Modelo logístico univariado -------- ML
formulita <- as.formula(paste("classification ~", var))
# Crear el modelo
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
# Obtener p-valor de la variable
resumen <- summary(modelo)
p_val <- coef(resumen)[2, 4]  # p-valor del coeficiente de la variable
# --- Calcular Accuracy ---
predicciones <- ifelse(predict(modelo, type = "response") > 0.5, 1, 0)
# Verificar que la variable dependiente sea numérica binaria (0/1)
# Si es factor, la convertimos
if (is.factor(datos_cancer$classification)) {
real <- as.numeric(datos_cancer$classification) - 1
} else {
real <- datos_cancer$classification
}
accuracy_val <- mean(predicciones == real, na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
P_Valor = p_val,
Accuracy = accuracy_val,
stringsAsFactors = FALSE
))
}
}
# 1. cargar los datos
datos_cancer <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/bcdr_d01_features.csv")
# 2. limpiar los datos
# por cada columna checar si hay NaN´S
# vamos a quitar la columna density por
sum(is.na(datos_cancer$density))
# como quitar una columna?
# paso 1: obtener el nombre y número (posicion) de columnas
colnames(datos_cancer) # me regresa el nombre y la posicion de las columnas
# paso 2: quitar la columna 15 density (operacion vectorial)
# datos_cancer <- datos_cancer[reglones(s), columnas(s)]
datos_cancer <- datos_cancer[ , -15] # todas menos la 15
# la columna classification tienen espacios
datos_cancer$classification
# vamos a convertir Malign -> 1 y Benign -> 0
# datos_cancer$classification[cuales reglones]
datos_cancer$classification[datos_cancer$classification == " Malign "] <- 1
datos_cancer$classification[datos_cancer$classification == " Benign "] <- 0
class(datos_cancer$classification)
# cambiar la columna classification de caracter a numero
datos_cancer$classification <- as.numeric(datos_cancer$classification)
class(datos_cancer$classification)
# Crear un data frame vacío donde guardaremos los resultados
resultados <- data.frame(
Variable = character(),
Desviacion_Estandar = numeric(),
Varianza = numeric(),
Rango = numeric(),
P_Valor = numeric(),
Accuracy = numeric(),
stringsAsFactors = FALSE
)
# Obtener los nombres de las variables excepto la última ('classification')
variables <- colnames(datos_cancer)[colnames(datos_cancer) != "classification"]
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# -------- Modelo logístico univariado -------- ML
formulita <- as.formula(paste("classification ~", var))
# Crear el modelo
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
# Obtener p-valor de la variable
resumen <- summary(modelo)
p_val <- coef(resumen)[2, 4]  # p-valor del coeficiente de la variable
# --- Calcular Accuracy ---
predicciones <- ifelse(predict(modelo, type = "response") > 0.5, 1, 0)
# Verificar que la variable dependiente sea numérica binaria (0/1)
# Si es factor, la convertimos
if (is.factor(datos_cancer$classification)) {
real <- as.numeric(datos_cancer$classification) - 1
} else {
real <- datos_cancer$classification
}
accuracy_val <- mean(predicciones == real, na.rm = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
P_Valor = p_val,
Accuracy = accuracy_val,
stringsAsFactors = FALSE
))
}
}
print(resultados, digits = 5)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# -------- Modelo logístico univariado -------- ML
p_val <- NA
accuracy_val <- NA
try({
formulita <- as.formula(paste("classification ~", var))
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
resumen <- summary(modelo)
# Verificar si hay coeficiente aparte del intercepto
if (nrow(coef(resumen)) >= 2) {
p_val <- coef(resumen)[2, 4]  # p-valor de la variable
}
# Calcular predicciones y accuracy
predicciones <- ifelse(predict(modelo, type = "response") > 0.5, 1, 0)
accuracy_val <- mean(predicciones == datos_cancer$classification, na.rm = TRUE)
}, silent = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
P_Valor = p_val,
Accuracy = accuracy_val,
stringsAsFactors = FALSE
))
}
}
formulita <- as.formula("classification ~ age")
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
# Obtener las prediccines sobre el conjunto de datos
predicciones <- predict(modelo, newdata = datos_cancer, type = "response")
predicciones
# Crear la tabla de comparaciones entre lo real y lo predicho
tablita <- data.frame(Original = datos_cancer$classification,
prediccionesModelo = predicciones)
# Binarizar pero de forma vectorial los datos de tablita (prediccionesModelo)
tablita$prediccionesModelo[tablita$prediccionesModelo < 0.5] <- 0
tablita$prediccionesModelo[tablita$prediccionesModelo >= 0.5] <- 1
# Calcular las metricas (Accuracy)
accuracy <- sum(tablita$Original == tablita$prediccionesModelo)/nrow(tablita)
accuracy
summary(modelo)
# Obtener: Desviacion estandar, Varianza, Rango Dinamico, p-valor y Accuracy
# De cada variable independinte
# Recorrer cada variable con un ciclo for
for (var in variables) {
# Verificar si la variable es numérica (para evitar errores con texto o factores)
if (is.numeric(datos_cancer[[var]])) {
# Calcular estadísticas básicas
sd_val <- sd(datos_cancer[[var]])
var_val <- var(datos_cancer[[var]])
rango_val <- max(datos_cancer[[var]], na.rm = TRUE) - min(datos_cancer[[var]], na.rm = TRUE)
# -------- Modelo logístico univariado -------- ML
p_val <- NA
accuracy_val <- NA
try({
formulita <- as.formula(paste("classification ~", var))
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
resumen <- summary(modelo)
# Verificar si hay coeficiente aparte del intercepto
if (nrow(coef(resumen)) >= 2) {
p_val <- coef(resumen)[2, 4]  # p-valor de la variable
}
# Calcular predicciones y accuracy
predicciones <- ifelse(predict(modelo, type = "response") > 0.5, 1, 0)
accuracy_val <- mean(predicciones == datos_cancer$classification, na.rm = TRUE)
}, silent = TRUE)
# Agregar resultados al data.frame
resultados <- rbind(resultados, data.frame(
Variable = var,
Desviacion_Estandar = sd_val,
Varianza = var_val,
Rango = rango_val,
P_Valor = p_val,
Accuracy = accuracy_val,
stringsAsFactors = FALSE
))
}
}
# Crear un data frame vacío donde guardaremos los resultados
install.packages("gt")
library(gt)
library(dplyr)
### Tabla de resultados:
gt(resultados)
resultados %>%
gt()
data %>%
gt() %>%
tab_header(title = md("Analisi **Univariado**"),
subtitle = md("Cancer de mama"))
resultados %>%
gt() %>%
tab_header(title = md("Analisi **Univariado**"),
subtitle = md("Cancer de mama"))
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
print(resultados, digits = 4)
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama")),
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
resultados %>%
gt() %>%
tab_spanner(
label = "Estadísticos",
columns = c(Desviacion_Estandar, Varianza, Rango)) %>%
tab_spanner(
label = "ML",
columns = c(P_Valor, Accuracy)
)
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
resultados %>%
gt() %>%
tab_spanner(
label = "Estadísticos",
columns = c(Desviacion_Estandar, Varianza, Rango)) %>%
tab_spanner(
label = "ML",
columns = c(P_Valor, Accuracy)
)
resultados %>%
gt() %>%
tab_spanner(
label = "**Estadísticos**",
columns = c(Desviacion_Estandar, Varianza, Rango)) %>%
tab_spanner(
label = "**ML**",
columns = c(P_Valor, Accuracy)
)
resultados %>%
gt() %>%
tab_header(title = md("**Análisis univariado**"),
subtitle = md("Cáncer de mama"))
install.packages("gtsummary")
### Otro tipo de tabla
library(gtsummary)
formulita <- as.formula("classification ~ age")
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
summary(modelo)
# generate table
model %>%
tbl_regression()
# generate table
modelo %>%
tbl_regression()
formulita <- as.formula("classification ~ age + t_energ")
modelo <- glm(formula = formulita, data = datos_cancer, family = "binomial")
summary(modelo)
# generate table
modelo %>%
tbl_regression()
install.packages("caret")
library(caret)
# Cragar datos
datos <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/DatosTitanic_SinLimpiar.csv")
View(datos)
DatosTitanic <- read.csv("D:/MCPI/Análisis_De_Datos/AnalisisDeDatos_Project/Datasets/DatosTitanic_SinLimpiar.csv", stringsAsFactors=TRUE)
View(DatosTitanic)
DatosTitanic
colnames(DatosTitanic)
class(DatosTitanic$Sexo)
# Limpiar el dataset
sum(is.na(datos$Id))
sum(is.na(DatosTitanic$Id))
sum(is.na(DatosTitanic$Vivio))
sum(is.na(DatosTitanic$Pclase))
sum(is.na(DatosTitanic$Nombre))
sum(is.na(DatosTitanic$Sexo))
sum(is.na(DatosTitanic$Edad))
datos_limpios <- DatosTitanic[is.na(DatosTitanic$Edad) == FALSE]
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- datos[!is.na(datos$Edad), ]
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- DatosTitanic!is.na(datos$Edad), ]
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- DatosTitanic!is.na(DatosTitanic$Edad), ]
# En este caso quitaremos el 20% de los datos vamos a remover 177 datos
datos_limpios <- DatosTitanic[!is.na(DatosTitanic$Edad), ]
# Validacion Cruzada
createFolds(y = datos_limpios$Vivio, k = 3,
returnTrain = TRUE,
list = TRUE)
View(datos_limpios)
# Validacion Cruzada
indices = createFolds(y = datos_limpios$Vivio, k = 3,
returnTrain = TRUE,
list = TRUE)
# Validacion Cruzada K = 1
datos_Fold_Entrenaminto <- datos_limpios[indices$Fold1, ]
datos_Fold_Prueba <- datos_limpios[-indices$Fold1, ]
View(datos_Fold_Entrenaminto)
View(datos_Fold_Prueba)
# Entrenamintos Modelos
modeloX <- glm(Vivio ~ Sexo + Edad,
data = datos_Fold_Entrenaminto,
family = "binomial")
# Metricas Entrenaminto
predicciones <- predict(modeloX, newdata = datos_Fold_Entrenaminto,
type = "response")
# Construir la tabla
tablitaX <- data.frame(Original = datos_Fold_Entrenaminto$Vivio,
prediccionesModelo = predicciones)
View(tablitaX)
# Binarizar pero de forma vectorial:
tablita$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
# Binarizar pero de forma vectorial:
tablitaX$prediccionesIA[tablita$prediccionesIA < 0.5] <- 0
tablitaX$prediccionesIA[tablita$prediccionesIA >= 0.5] <- 1
# Binarizar pero de forma vectorial:
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
# Calcular el accuracy de entrenaminto
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy
View(tablitaX)
######## Ahora para VALIDACION ########
predicciones <- predict(modeloX, newdata = datos_Fold_Prueba,
type = "response")
tablitaX <- data.frame(Original = datos_Fold_Prueba$Vivio,
prediccionesModelo = predicciones)
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy
######################
# Validacion Cruzada K = 2
datos_Fold_Entrenaminto <- datos_limpios[indices$Fold2, ]
datos_Fold_Prueba <- datos_limpios[-indices$Fold2, ] # todos menos los del los inices
##### ----- Entrenamintos Modelos ------ #####
modeloX <- glm(Vivio ~ Sexo + Edad,
data = datos_Fold_Entrenaminto,
family = "binomial")
# Metricas Entrenaminto
predicciones <- predict(modeloX, newdata = datos_Fold_Entrenaminto,
type = "response")
# Construir la tabla
tablitaX <- data.frame(Original = datos_Fold_Entrenaminto$Vivio,
prediccionesModelo = predicciones)
# Binarizar pero de forma vectorial:
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
# Calcular el accuracy de entrenaminto
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy # 0.789916
######## Ahora para VALIDACION K =1 ########
predicciones <- predict(modeloX, newdata = datos_Fold_Prueba,
type = "response")
tablitaX <- data.frame(Original = datos_Fold_Prueba$Vivio,
prediccionesModelo = predicciones)
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy # 0.7605042
######################
# Validacion Cruzada K = 3
datos_Fold_Entrenaminto <- datos_limpios[indices$Fold3, ]
datos_Fold_Prueba <- datos_limpios[-indices$Fold3, ] # todos menos los del los inices
##### ----- Entrenamintos Modelos ------ #####
modeloX <- glm(Vivio ~ Sexo + Edad,
data = datos_Fold_Entrenaminto,
family = "binomial")
# Metricas Entrenaminto
predicciones <- predict(modeloX, newdata = datos_Fold_Entrenaminto,
type = "response")
# Construir la tabla
tablitaX <- data.frame(Original = datos_Fold_Entrenaminto$Vivio,
prediccionesModelo = predicciones)
# Binarizar pero de forma vectorial:
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
# Calcular el accuracy de entrenaminto
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy # 0.7941176
######## Ahora para VALIDACION K = 3 ########
predicciones <- predict(modeloX, newdata = datos_Fold_Prueba,
type = "response")
tablitaX <- data.frame(Original = datos_Fold_Prueba$Vivio,
prediccionesModelo = predicciones)
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo < 0.5] <- 0
tablitaX$prediccionesModelo[tablitaX$prediccionesModelo >= 0.5] <- 1
accuracy <- sum(tablitaX$Original == tablitaX$prediccionesModelo)/nrow(tablitaX)
accuracy # 0.7521008
